-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.authors
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT authors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.book_genres
(
    id serial NOT NULL,
    id_genre integer NOT NULL,
    id_book integer NOT NULL,
    CONSTRAINT book_genres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.books
(
    id serial NOT NULL,
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    author_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    anio integer,
    isbn character varying(20) COLLATE pg_catalog."default",
    image text COLLATE pg_catalog."default" DEFAULT ''::text,
    stock integer NOT NULL,
    subscriber_exclusive boolean DEFAULT false,
    price double precision NOT NULL,
    CONSTRAINT books_pkey PRIMARY KEY (id),
    CONSTRAINT books_isbn_key UNIQUE (isbn)
);

CREATE TABLE IF NOT EXISTS public.genres
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT genres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.purchases
(
    id serial NOT NULL,
    id_user integer NOT NULL,
    id_book integer NOT NULL,
    amount integer NOT NULL,
    price integer NOT NULL,
    virtual boolean DEFAULT false,
    purchase_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT purchases_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    id serial NOT NULL,
    id_user integer NOT NULL,
    id_book integer NOT NULL,
    rating smallint NOT NULL,
    comment character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    review_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reviews_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.shopping_cart_book
(
    id serial NOT NULL,
    id_user integer NOT NULL,
    id_book integer NOT NULL,
    amount integer NOT NULL,
    virtual boolean DEFAULT false,
    CONSTRAINT shopping_cart_book_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.subscription_book_discount
(
    id serial NOT NULL,
    id_book integer NOT NULL,
    discount double precision NOT NULL DEFAULT 0,
    CONSTRAINT subscription_book_discount_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_subscription
(
    id serial NOT NULL,
    id_user integer NOT NULL,
    start_date timestamp without time zone NOT NULL,
    end_date timestamp without time zone NOT NULL,
    ongoing boolean DEFAULT false,
    CONSTRAINT user_subscription_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_virtual_books
(
    id serial NOT NULL,
    id_user integer NOT NULL,
    id_book integer NOT NULL,
    CONSTRAINT user_virtual_books_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,
    firstname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    tel character varying(20) COLLATE pg_catalog."default" DEFAULT ''::character varying,
    admin boolean DEFAULT false,
    disabled boolean DEFAULT false,
    image text COLLATE pg_catalog."default" DEFAULT ''::text,
    registration_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.virtual_book_content
(
    id serial NOT NULL,
    id_book integer NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT virtual_book_content_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.book_genres
    ADD FOREIGN KEY (id_genre)
    REFERENCES public.genres (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.book_genres
    ADD FOREIGN KEY (id_book)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (author_id)
    REFERENCES public.authors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (id)
    REFERENCES public.reviews (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (id)
    REFERENCES public.purchases (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (id)
    REFERENCES public.shopping_cart_book (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (id)
    REFERENCES public.virtual_book_content (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (id)
    REFERENCES public.user_virtual_books (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.books
    ADD FOREIGN KEY (id)
    REFERENCES public.subscription_book_discount (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (id)
    REFERENCES public.user_subscription (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (id)
    REFERENCES public.reviews (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (id)
    REFERENCES public.purchases (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (id)
    REFERENCES public.shopping_cart_book (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;