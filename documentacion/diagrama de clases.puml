@startuml Alejandria

'======================
' Entidades
'======================

class AuthorEntity {
  + id: number
  + name: string
}

class BookGenresEntity {
  + id: number
  + id_book: number
  + id_genre: number
}

class BookEntity {
  + id: number
  + title: string
  + authorId: number
  + description: string
  + anio: number
  + isbn: string
  + image: string
  + stock: number
  + subscriber_exclusive: boolean
  + price: number
}

class VirtualBookContent {
  + id: number
  + idBook: number
  + content: string
}

class UserVirtualBooks {
  + id: number
  + idUser: number
  + idBook: number
}

class ReviewEntity {
  + id: number
  + id_user: number
  + id_book: number
  + rating: number
  + comment: string
  + reviewDate: Date
}

class GenreEntity {
  + id: number
  + name: string
}

class PurchaseEntity {
  + id: number
  + idUser: number
  + idBook: number
  + amount: number
  + virtual: boolean
  + purchaseDate: Date
}

class ShoppingCartBookEntity {
  + id: number
  + idUser: number
  + idBook: number
  + amount: number
  + virtual: boolean
}

class UserEntity {
  + id: number
  + firstname: string
  + lastname: string
  + username: string
  + email: string
  + password: string
  + tel: string
  + disabled: boolean
  + image: string
  + registrationDate: Date
}


/'
SettingsService


VirtualBookContent
'/

'======================
' DTOs
'======================

package AuthDTO {
  class LoginRequestBody {
    + email: string;
    + password: string;
  }

  class RegisterRequestBody {
    + username: string;
    + fistname: string;
    + lastname: string;
    + email: string;
    + image: string;
    + password: string;
  }
}

class CreateAuthorDTO {
  + name: string;
}

class BookGenresDTO {
  + id_book: number;
  + name: string;
}

class BookDTO {
  + id: number;
  + title: string;
  + author: string;
  + author_id: number;
  + description: string;
  + genre: string[];
  + anio: number;
  + isbn: string;
  + image: string;
  + stock: number;
  + BookDTO2BookEntity(props): Book
  + BookEntity2BookDTO(props): BookDTO
}

class CatalogueBookDTO {
  + id: number;
  + title: string;
  + author: string;
  + author_id: number;
  + description: string;
  + genre: string[];
  + anio: number;
  + image: string;
  + stock: number;
  + subscriber_exclusive: boolean;
  + price: number;
}

class BookContentDTO {
  + idBook;
  + content: string;
}

class LibraryBookDTO {
  + id: number;
  + title: string;
  + author_id: number;
  + description: string;
  + isbn: string;
  + image: string;
}

class CreateUserVirtualBookDto {
  + idUser: number
  + idBook: number
}

class ReviewI {
    + id: number
    + id_user: number
    + id_book: number
    + username: string
    + comment: string
    + rating: number
    + reviewDate: string
}

class PurchaseDTO {
  + id: number
  + id_user: number
  + id_book: number
  + title: string
  + author: string
  + image: string
  + price: number
  + virtual: boolean
  + amount: number
  + purchaseDate: Date
}

class BookCartDTO {
  + id: number
  + idBook:number
  + title: string
  + author: string
  + image: string
  + price: number
  + virtual:boolean
  + amount: number
}

class UpdateUserDto {
  + admin: boolean
  + disabled : boolean
}

'======================
' Services
'======================

class AuthService {
  + register(requestBody: RegisterRequestBody)
  + login(requestBody: LoginRequestBody)
  + validateUser(email: string, pass: string): Promise<any>
}

class AuthorService {
  + create(createAuthorDTO: CreateAuthorDTO): Promise<Author>
  + findAll(): Promise<Author[]>
  + findOne(id: number): Promise<Author>
  + remove(id: number): Promise<void>
}

class BookGenresService {
  + findAll(): Promise<BookGenre[]>
  + create(data: Partial<BookGenreDto>): Promise<BookGenre>
  + delete(id: number)
}

class BookService {
  + findAll(): Promise<BookDTO[]>
  + findOne(id: number): Promise<BookDTO | null>
  + create(bookDTO: BookDTO)
  + update(id: number, bookDTO: BookDTO)
  + delete(id: number)
  + bookImageUrl = (imageName:string):string=>
}

class CatalogueBookService {
  + findAll(): Promise<CatalogueBookDTO[]>
  + findOne(id: number)
}

class BookContentService {
  + get(id:number): Promise<BookContentDTO|null>
  + create(bookContent: Partial<BookContentDTO>): Promise<BookContentDTO>
  + update(id:number, bookContent: BookContentDTO)
  + delete(id:number)
}

class LibraryBooksService {
  + findAllByUser(idUser: number): Promise<LibraryBookDTO[]>
  + create(userVirtualBook: { idUser: number, idBook: number }): Promise<UserVirtualBooks>
}

class BookReviewsService {
  + create(reviewData: Partial<ReviewI>): Promise<ReviewI>
  + findAll(): Promise<Review[]>
  + findOne(id: number): Promise<Review>
  + findReviewsByBookId(bookId: number): Promise<ReviewI[]>
  + update(id: number, reviewData: ReviewI)
  + remove(id: number): Promise<void>
}

class GenresService {
  + findAll(): Promise<Genre[]>
  + create(genre: Partial<Genre>): Promise<Genre>
}

class PurchasesService {
  + processPurchase(idUser: number, cartItems: PurchaseItem[]): Promise<void>
  + getPurchaseHistory(idUser: number): Promise<PurchaseDTO[] | null>
}

class ShoppingCartService {
  + findByUser(idUser: number): Promise<BookCartDTO[] | null>
  + create(book: Partial<ShoppingCartBook>)
  + update(idBookCart: number, updateData: Partial<ShoppingCartBook>)
  + delete(id: number)
}

class UsersService {
  + findAll(search = ''): Promise<User[]>
  + findOne(id: number)
  + create(user: Partial<User>)
  + findByEmail(email: string): Promise<User | null>
  + update(id: number, updateData: Partial<User>)
  + delete(id: number)
}

'======================
' Controllers
'======================

class AuthController {
  + POST /login
  + POST /register
}

class AuthorController {
  + GET /authors
  + GET /authors/:id
  + POST /authors
  + DELETE /authors/:id
}

class BookGenresController {
  + GET /book_genres
  + POST /book_genres
  + DELETE /book_genres/:id
}

class BookController {
  + GET /books
  + GET /books/:id
  + POST /books
  + PUT /books/:id
  + DELETE /books/:id
}

class CatalogueBookController {
  + GET /catalogue_books
  + GET /catalogue_books/:id
}

class BookContentController {
  + GET book/content/:id
  + POST book/content
  + PUT book/content/:id
  + DELETE book/content:id
}

class LibraryBooksController {
  + GET /library_books/:idUser
  + POST /library_books
}

class BookReviewsController {
  GET /reviews
  GET /reviews/:id
  GET /reviews/book/:bookId
  POST /reviews
  PUT /reviews/:id
  DELETE /reviews/:id
}

class GenresController {
  GET /genres
  POST /genres
}

class PurchasesController {
  + POST /purchases
  + GET /purchases/:idUser
}

class ShoppingCartController {
  + GET /shopping-cart/:idUser
  + POST /shopping-cart
  + PUT /shopping-cart/:idBookCart
  + DELETE /shopping-cart/:id
}

class UsersController {
  + GET /users
  + GET /users/:id
  + POST /users
  + PUT /users/:id
  + DELETE /users/:id
  + GET /users
  + PATCH /users/:id
}


'======================
' Parte con AppModule corto (faltan agregar mas imports y relaciones.).

' class AppModule {
  '   + imports: BookModule, AuthorModule, GenreModule, UserModule
  '
' }

' AppModule --> BookModule
' AppModule --> AuthorModule
' AppModule --> GenreModule
' AppModule --> UserModule
' '======================


'======================
' Parte con AppModule completo.
' Como podemos apreciar el diagrama (y cuando probamos generar el png tambien) el diagrama queda dificil de leeer.

' class AppModule {
  '     + imports: AuthModule, UsersModule, AuthorModule, BooksModule, BookReviewsModule, GenresModule, BookGenresModule, ShoppingCartModule, CatalogueBooksModule, PurchasesModule, LibraryBooksModule, BookContentModule
  '
' }

' AppModule --> AuthModule
' AppModule --> UsersModule
' AppModule --> AuthorModule
' AppModule --> BooksModule
' AppModule --> BookReviewsModule
' AppModule --> GenresModule
' AppModule --> BookGenresModule
' AppModule --> ShoppingCartModule
' AppModule --> CatalogueBooksModule
' AppModule --> PurchasesModule
' AppModule --> LibraryBooksModule
' AppModule --> BookContentModule

'======================


'======================
' Relaciones
'======================

AuthController --> AuthService
AuthService --> AuthDTO
' AuthService --> LoginRequestBody
' AuthService --> RegisterRequestBody

AuthorController --> AuthorService
AuthorService --> AuthorEntity
AuthorService --> CreateAuthorDTO

BookGenresController --> BookGenresService
BookGenresService --> BookGenresEntity
BookGenresService --> BookGenresDTO
BookGenresService --> GenreEntity

BookController --> BookService
BookService --> BookEntity
BookService --> AuthorEntity
BookService --> GenreEntity
BookService --> BookGenresEntity
BookService --> BookDTO

CatalogueBookController --> CatalogueBookService
CatalogueBookService --> CatalogueBookDTO

BookContentController --> BookContentService
BookContentService --> VirtualBookContent
BookContentService --> BookContentDTO

LibraryBooksController --> LibraryBooksService
LibraryBooksService --> UserVirtualBooks
LibraryBooksService --> LibraryBookDTO

BookReviewsController --> BookReviewsService
LibraryBooksController --> CreateUserVirtualBookDto
BookReviewsService --> UserEntity
BookReviewsService --> ReviewEntity
BookReviewsService --> ReviewI

GenresController --> GenresService
GenresService --> GenreEntity

PurchasesController --> PurchasesService
PurchasesService --> PurchaseEntity
PurchasesService --> ShoppingCartBookEntity
PurchasesService --> BookEntity
PurchasesService --> UserEntity
PurchasesService --> AuthorEntity
PurchasesService --> PurchaseDTO

ShoppingCartController --> ShoppingCartService
ShoppingCartService --> ShoppingCartBookEntity
ShoppingCartService --> AuthorEntity
ShoppingCartService --> BookEntity
ShoppingCartService --> UserEntity
ShoppingCartService --> BookCartDTO


UsersController --> UsersService
UsersController --> UpdateUserDto
UsersService --> UserEntity



'EXTRAS
AuthService --> UsersService : usersService

BookService --> GenresService : genreId
BookService --> AuthorService : authorId
BookService --> SettingsService : bookImageUrl

CatalogueBookService --> BookService : booksService

LibraryBooksService --> BookService :: findAllByUser




@enduml
