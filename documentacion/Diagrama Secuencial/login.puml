@startuml login version 2

actor Usuario
participant "Next.js (LoginForm)" as Next
participant "AuthService (NestJS)" as AuthService
participant "UsersService (NestJS)" as UsersService
participant "bcrypt"
participant "JWTService" as JWT

actor Usuario
participant "Next.js (LoginForm)" as Next
participant "AuthService (NestJS)" as AuthService
participant "UsersService (NestJS)" as UsersService
participant "bcrypt"
participant "JWTService" as JWT

Usuario -> Next: Ingresar email y contrase침a
Next -> AuthService: POST /auth/login { email, password }

AuthService -> UsersService: findByEmail(email)
UsersService --> AuthService: usuario (incluye password hasheado)

AuthService -> bcrypt: compare(password, usuario.password)
bcrypt --> AuthService: true/false

' Validaci칩n de credenciales
note right of AuthService
  Si el usuario no existe o la contrase침a es incorrecta:
  - lanzar UnauthorizedException (401)
end note

' Verificaci칩n de bloqueo
note right of AuthService
  Si user.disabled === true:
  - lanzar ForbiddenException (403)
end note

AuthService -> JWT: sign({ email, sub: id, username, admin })
JWT --> AuthService: access_token

AuthService --> Next: 200 OK + { access_token }
Next -> Next: Guardar token (localStorage/cookie)
Next --> Usuario: Acceso concedido


@enduml