@startuml Alejandria
skinparam linetype ortho


'========================
'Entidades
'========================

class AuthorEntity{
    - id: number
    - name: string
}

class BookRecommendationEntity {
    - id: number
    - id_book: number
    + book: Book
}

class BookEntity {
    - id: number
    - title: string
    - author_id: number
    - description: string
    - anio: number
    - isbn: string
    - image: string = ""
    - stock: number
    - subscriber_exclusive: boolean = false
    - price: number
    + author: Author
    + genres: Genre[]
}

class CarouselEntity  {
    - id: number
    - idBook: number
    - image: string = ""
}

class  GenreEntity {
    - id: number
    - name: string
}

class PurchaseEntity {
    - id: number
    - idUser: number
    - idBook: number
    - amount: number
    - price: number
    - virtual: boolean = false
    - purchaseDate: Date
    + user: User
    + book: Book
}

class ReviewEntity {
    - id: number
    - id_user: number
    - id_book: number
    - rating: number
    - comment: string
    - reviewDate: Date
    + user: User
}

'class SesionTokenEntity {
'    - id: number
'    - idBook: number
'    - token: string
'}

class ShoppingCartBookEntity {
    - id: number
    - idUser: number
    - idBook: number
    - amount: number
    - virtual: boolean
    + user: User
    + book: Book
}

class UserSubscriptionEntity {
    - id: number
    + user: User
    - startDate: Date
    - endDate: Date
    - ongoing: boolean
    - subscription: Subscription
}

class SubscriptionEntity {
    - id: number
    - price: number
    + userSubscriptions: UserSubscription[]
}

class UserVirtualBooksEntity {
    - id: number
    - id_user: number
    - id_book: number
    + book: Book
}

class VirtualBookContentEntity {
    - id: number
    - id_book:number
    - content: string
}

class UserEntity {
    - id: number
    - firstname: string
    - lastname: string
    - username: string
    - email: string
    - password: string
    - tel: string
    - admin: boolean
    - disabled: boolean
    - registrationDate: Date
    + userSubscriptions: UserSubscription[]
}

Class UserSubscriptionDiscountEntity {
    - id: number
    - subscription: Subscription
    - discount: number
}
class AuthorEntity{
    - id: number
    - name: string
}

class BookRecommendationEntity {
    - id: number
    - id_book: number
    + book: Book
}

class BookEntity {
    - id: number
    - title: string
    - author_id: number
    - description: string
    - anio: number
    - isbn: string
    - image: string = ""
    - stock: number
    - subscriber_exclusive: boolean = false
    - price: number
    + author: Author
    + genres: Genre[]
}

class CarouselEntity  {
    - id: number
    - idBook: number
    - image: string = ""
}

class  GenreEntity {
    - id: number
    - name: string
}

class PurchaseEntity {
    - id: number
    - idUser: number
    - idBook: number
    - amount: number
    - price: number
    - virtual: boolean = false
    - purchaseDate: Date
    + user: User
    + book: Book
}

class ReviewEntity {
    - id: number
    - id_user: number
    - id_book: number
    - rating: number
    - comment: string
    - reviewDate: Date
    + user: User
}

'class SesionTokenEntity {
'    - id: number
'    - idBook: number
'    - token: string
'}

class ShoppingCartBookEntity {
    - id: number
    - idUser: number
    - idBook: number
    - amount: number
    - virtual: boolean
    + user: User
    + book: Book
}

class UserSubscriptionEntity {
    - id: number
    + user: User
    - startDate: Date
    - endDate: Date
    - ongoing: boolean
    - subscription: Subscription
}

class SubscriptionEntity {
    - id: number
    - price: number
    + userSubscriptions: UserSubscription[]
}

class UserVirtualBooksEntity {
    - id: number
    - id_user: number
    - id_book: number
    + book: Book
}

class VirtualBookContentEntity {
    - id: number
    - id_book:number
    - content: string
}

class UserEntity {
    - id: number
    - firstname: string
    - lastname: string
    - username: string
    - email: string
    - password: string
    - tel: string
    - admin: boolean
    - disabled: boolean
    - registrationDate: Date
    + userSubscriptions: UserSubscription[]
}

Class UserSubscriptionDiscountEntity {
    - id: number
    - subscription: Subscription
    - discount: number
}


'========================
' DTOs
'========================

class LoginRequestBody {
    + email: string
    + password: string

    + LoginRequestBody(email: string, password: string)
}

class RegisterRequestBody {
    + username: string
    + firstname: string
    + lastname: string
    + email: string
    + password: string

    + RegisterRequestBody(props: registerRequestBodyProps)
}

interface registerRequestBodyProps {
    username: string,
    firstname: string,
    lastname: string,
    email: string,
    password: string
}

class CreateAuthorDto {
    + name: string;

    + CreateAuthorDto(name: string)
}

class BookDTO {
    + id: number
    + title: string
    + author: string
    + author_id: number
    + description: string
    + genre: Genre[]
    + anio: number
    + isbn: string
    + image: string
    + stock: number
    + subscriber_exclusive: boolean
    + price: number

    + BookDTO(props: BookDTOProps)
    + {static} BookDTO2BookEntity(bookDTO: BookDTO): Book
    + {static} BookEntity2BookDTO(book: Book): BookDTO
}

interface BookDTOProps {
    id: number,
    title: string,
    author: string,
    author_id: number,
    description: string,
    genre: Genre[],
    anio: number,
    isbn: string,
    image: string,
    stock: number,
    subscriber_exclusive: boolean,
    price: number
}

class CreateBookDto {
    + title: string
    + author_id: number
    + description: string
    + anio: number
    + isbn: string
    + image: string
    + stock: number
    + subscriber_exclusive: boolean
    + price: number
    + genre: number[]

    + CreateBookDTO(props: CreateBookDTOProps)
}

interface CreateBookDTOProps {
    title: string,
    author_id: number,
    description: string,
    anio: number,
    isbn: string,
    image: string,
    stock: number,
    subscriber_exclusive: boolean,
    price: number,
    genre: number[],
}

class CatalogueBookDTO {
    + id: number
    + id_user: number
    + id_book: number
    + title: string
    + author: string
    + image: string
    + price: number
    + virtual: boolean
    + amount: number
    + purchaseDate: Date
}

class BookContentDTO {
    + idBook: number
    + content:string

    + BookContentDTO(idBook:number, content:string)
}

class LibraryBookDTO {
    + id: number
    + title: string
    + author_id: number
    + description: string
    + isbn: string
    + image: string
    + LibraryBookDTO(id: number, title: string, author_id: number,
     description: string, isbn: string, image: string)
}

class CreateUserVirtualBookDto {
    + idUser: number
    + idBook: number

    + CreateUserVirtualBookDto(idUser: number, idBook: number)
}

class ReviewI {
    + id: number
    + id_user: number
    + id_book: number
    + username: string
    + comment: string

    + ReviewI(id: number, id_user: number, 
    id_book: number, username: string, 
    comment: string, rating: number, reviewDate: string)
}

class PurchaseDTO {
    + id:number
    + id_user:number
    + title: string
    + author: string
    + image: string
    + price: number
    + virtual: boolean
    + amount: number
    + purchaseDate: Date

    + PurchaseDTO(props: PurchaseDTOProps)
}

interface PurchaseDTOProps {
    id: number,
    id_user: number,
    id_book: number,
    title: string,
    author: string,
    image: string,
    price: number,
    virtual: boolean,
    amount: number,
    purchaseDate: Date,
}

class CreateRecommendationDTO {
    + idBook: number
}

class RecommendationDTO {
    + id: number
    + idBook: number
    + title: string
    + author: string
    + image:string

    + RecommendationDTO(id:number, idBook: number, title: string, author:string, image:string)
}

class CarouselDTO {
    + id: number
    + idBook: number
    + image: string
}

class BookCartDTO {
    + id: number
    + idBook: number
    + title: string
    + author: string
    + image: string
    + price: number
    + virtual:boolean
    + amount: number
}

class SubscriptionDTO {
    + id:number
    + price: number
}

class UserSubscriptionDTO {
    + id: number
    + startDate: string
    + endDate: string
    + ongoing: boolean
    + subscription: SubscriptionDTO | null
}

class UpdateUserDto {
    + admin: boolena
    + disabled: boolean
}

'========================
'Servicies
'========================

class AuthService {
    - usersService: UsersService
    - jwtService: JwtService

    + register(requestBody: RegisterRequestBody)
    + login(requestBody: LoginRequestBody)
    + validateUser(email: string, pass: string)
}

class AuthorService {
    - authorRepository: Repository<Author>

    + create(createAuthorDto: CreateAuthorDto): Promise<Author>
    + findAll(): Promise<Author[]>
    + findOne(id: number): Promise<Author>
    + remove(id: number): Promise<void>
}

class BooksService {
    - settingsService: SettingsService
    - booksRepository: Repository<Book>
    - genreRepository: Repository<Genre>

    + findAll(): Promise<BookDTO[]>
    + findAllWithGenre(genreId: number): Promise<BookDTO[]>
    + findAllByAuthor(authorId: number): Promise<BookDTO[]>
    + findOne(id: number): Promise<BookDTO | null>
    + create(bookDTO: CreateBookDTO)
    + update(id: number, bookDTO: CreateBookDTO)
    + delete(id: number): Promise<boolean>

    + bookImageUrl = (imageName:string):string
}

class CatalogueBooksService {
    - booksService: BooksService

    + findAll(): Promise<CatalogueBookDTO[]>
    + findOne(id: number)
}

class BookContentService {
    -  bookContentRepository: Repository<VirtualBookContent>

    + get(id:number):Promise<BookContentDTO|null>
    + create(bookContent: Partial<BookContentDTO>): Promise<BookContentDTO>
    + update(id:number, bookContent: BookContentDTO)
    + delete(id: number)
}

class LibraryBooksService {
    - userVirtualBooks: Repository<UserVirtualBooks>

    + findAllByUser(idUser: number): Promise<LibraryBookDTO[]>
    + create(userVirtualBook: { idUser: number, idBook: number }): Promise<UserVirtualBooks>
}

class BookReviewsService {
    - reviewRepository: Repository<Review>

    + create(reviewData: Partial<ReviewI>): Promise<ReviewI>
    + findAll(): Promise<Review[]>
    + findOne(id: number): Promise<Review>
    + findReviewsByBookId(bookId: number): Promise<ReviewI[]>
    + update(id: number, reviewData: ReviewI)
    + remove(id: number): Promise<void>
}

class GenresService {
    - genreRepository: Repository<Genre>

    + findAll(): Promise<Genre[]>
    + create(genre: Partial<Genre>): Promise<Genre>
}

class PurchaseService {
    - purchaseRepository: Repository<Purchase>,
    - cartRepository: Repository<ShoppingCartBook>
    - booksRepository: Repository<Book>
    - userRepository: Repository<User>

    + processPurchase(idUser: number, cartItems: PurchaseItem[]): Promise<void>
    + getPurchaseHistory(idUser: number): Promise<PurchaseDTO[] | null>
}

class RecomendationsService {
    - recomendationsRepository: Repository<BookRecommendation>

    + findAll(): Promise<RecommendationDTO[]>
    + findOne(id: number): Promise<RecommendationDTO>
    + create(body: CreateRecommendationDTO): Promise<RecommendationDTO>
    + update(id:number, body: CreateRecommendationDTO): Promise<RecommendationDTO>
    + remove(id: number): Promise<void>
}

class CarouselService {
    - settingsService: SettingsService
    - carouselRepository: Repository<Carousel>

    + findAll(): Promise<CarouselDTO[]>
    + create(body: CarouselDTO): Promise<CarouselDTO>
    + update(id: number, updateData: Partial<CarouselDTO>)
    + remove(id: number): Promise<void>
    + bookImageUrl = (imageName: string): string
}

class ShoppingCartService {
    - cartBookShoppingRepository: Repository<ShoppingCartBook>

    + findByUser(idUser: number): Promise<BookCartDTO[] | null>
    + create(book: Partial<ShoppingCartBook>)
    + update(idBookCart: number, updateData: Partial<ShoppingCartBook>)
    + delete(id: number)
}

class SubscriptionService {
    - subscriptionConfigRepository: Repository<Subscription>

    + get(): Promise<SubscriptionDTO>
    + update(id: number, config: Partial<SubscriptionDTO>)
    + create(data: SubscriptionDTO): Promise<Subscription>
}

class UserSubscriptionService {
    - userSubscriptionRepository: Repository<UserSubscription>
    - userRepository: Repository<User>
    - subscriptionRepository: Repository<Subscription>

    + createSubscription(userId: number, startDate: Date, endDate: Date): Promise<UserSubscription>
    + getUserSubscription(userId: number): Promise<UserSubscriptionDTO>
    + getUserSubscriptions(): Promise<UserSubscriptionDTO[]>
    + cancelSubscription(id: number): Promise<void>
}

class UsersService {
    - usersRepository: Repository<User>

    + findAll(search = ''): Promise<User[]>
    + findOne(id: number)
    + create(user: Partial<User>)
    + findByEmail(email: string): Promise<User | null>
    + findByUser(username: string): Promise<User | null>
    + update(id: number, updateData: Partial<User>)
    + delete(id: number)
}

class UserSubscriptionDiscountService {
    - discountRepo: Repository<UserSubscriptionDiscount>
    - subscriptionRepo: Repository<Subscription>
    
    + create(data: { id_subscription: number; discount: number }): Promise<UserSubscriptionDiscount>
    + findAll(): Promise<UserSubscriptionDiscount[]>
    + findOne(id: number): Promise<UserSubscriptionDiscount>
    + update(id: number, data: { discount: number }): Promise<UserSubscriptionDiscount>
    + delete(id: number): Promise<void>
}

'========================
'Controllers
'========================

class AuthController {
    - authService: AuthService

    + login(LoginRequestBody: LoginRequestBody)
    + registerUser(requestBody: RegisterRequestBody)
}

class AuthorController {
    - authorService: AuthorService

    + findAll()
    + findOne(id: number)
    + create(createAuthorDto: CreateAuthorDto): Promise<Author>
    + remove(id: number)
}


class CatalogueBooksController {
    - booksService: CatalogueBooksService

    + findAll(): Promise<CatalogueBookDTO[]>
    + findOne(id: number): Promise<CatalogueBookDTO | null>
}

class BookContentController {
    - bookContentService: BookContentService

    + get(id: number):Promise<BookContentDTO|null>
    + post(bookContent: BookContentDTO):Promise<BookContentDTO>
    + update(id: number, bookContent: BookContentDTO)
    + delete(id: number)
}

class LibraryBooksController {
    - libraryBooksService: LibraryBooksService

    + findAllByUser(idUser: number): Promise<LibraryBookDTO[]>
    + create(createUserVirtualBookDto: CreateUserVirtualBookDto): Promise<UserVirtualBooks>
}

class BookReviewsController {
    - reviewService: BookReviewsService

    + findAll()
    + findOne(id: number) 
    + findReviewsByBookId(bookId: number)
    + create(reviewData: ReviewI)
    + update(id:number, reviewData: ReviewI)
    + remove(id: number)
}

class GenresController {
    - genresService: GenresService

    + findAll(): Promise<Genre[]>
    + create(newGenre: Partial<Genre>): Promise<Genre>
}

class PurchasesController {
    -  purchasesService: PurchasesService

    + processPurchase(body: ProcessPurchaseDTO)
    + getPurchaseHistory(idUser: number): Promise<PurchaseDTO[] | null>
}

class RecomendationsController {
    - recomendationsService: RecomendationsService

    + findAll()
    + findOne(id: string)
    + reate(body: CreateRecommendationDTO): Promise<RecommendationDTO>
    + update(id: string, body: CreateRecommendationDTO): Promise<RecommendationDTO>
    + remove(id: string)
}

class CarouselController {
    - carouselService: CarouselService

    + findAll()
    + create(body: CarouselDTO, file: Express.Multer.File): Promise<CarouselDTO>
    + update(id: number, updateData: Partial<CarouselDTO>
    + remove(id: string)
}

class ShoppingCartController {
    - shoppingCartService: ShoppingCartService

    + findByUser(id: number): Promise<BookCartDTO[] | null>
    + create(book: Partial<ShoopingCartBook>)
    + update(idBookCart: number, updateData: Partial<ShoppingCartBook>)
    + delete(id: number)
}

class SubscriptionController {
    - subscriptionService: SubscriptionService

    + getUserSubscriptions(): Promise<SubscriptionDTO>
    + update(updateData: Partial<SubscriptionDTO>)
    + create(data: SubscriptionDTO)
}

class UserSubscriptionController {
    - userSubscriptionService: UserSubscriptionService

    + createSubscription(userId: number, startDate: Date, endDate: Date,): Promise<UserSubscription>
    + getUserSubscription(userId: number): Promise<UserSubscriptionDTO>
    + getUserSubscriptions() : Promise<UserSubscriptionDTO[]>
    + cancelSubscription(id: number): Promise<void>
}

Class UsersControllers {
    - usersService: UsersService

    + getAllUsers(): Promise<User[]>
    + findOne(id: number)
    + create(user: Partial<User>)
    + update(id: number, user: Partial<User>)
    + delete(id: number)
    + findAll(search: string)
    + updateUser(id: number, dto: UpdateUserDto)
}

Class UserSubscriptionDiscountController {
    - discountService: UserSubscriptionDiscountService

    + create(data: { id_subscription: number; discount: number }): Promise<UserSubscriptionDiscount>
    + findAll(): Promise<UserSubscriptionDiscount[]>
    + findOne(id: number): Promise<UserSubscriptionDiscount>
    + update(id: number, data: { discount: number } ): Promise<UserSubscriptionDiscount> 
    + delete(id: number): Promise<void>
}


' relaciones 


BookEntity "0..*" *-- "1" AuthorEntity 
BookEntity "*" -- "*" GenreEntity
BookRecommendationEntity "0..*" *-- "1" BookEntity 
CarouselEntity "1" --> "1" BookEntity : Libro
PurchaseEntity "0..*" --> "1" UserEntity : Usuario
PurchaseEntity "0..*" --> "1" BookEntity : Libro
ReviewEntity "0..*" --> "1" UserEntity : Usuario
ReviewEntity "0..*" --> "1" BookEntity : Libro
ShoppingCartBookEntity "0..*" --> "1" UserEntity : Usuario
ShoppingCartBookEntity "0..*" --> "1" BookEntity : Libro
UserSubscriptionEntity "0..*" --> "1" UserEntity : Usuario
UserSubscriptionEntity "0..*" --> "1" SubscriptionEntity : Suscripcion
SubscriptionEntity "1" --> "0..*" UserSubscriptionEntity : Suscripcion Usuario
UserVirtualBooksEntity "0..*" --> "1" UserEntity : Usuario
UserVirtualBooksEntity "0..*" --> BookEntity : Libro
VirtualBookContentEntity "1" --> "1" BookEntity : book
UserSubscriptionDiscountEntity "0..*" --> "1" SubscriptionEntity : Suscripcion
UserEntity "0..*" --> UserSubscriptionEntity : Suscripcion Usuario

AuthController --> AuthService : Depende de
AuthorController --> AuthorService : Depende de
BookController --> BooksService : Depende de
CatalogueBooksController --> CatalogueBooksService : Depende de
BookContentController --> BookContentService : Depende de
LibraryBooksController --> LibraryBooksService : Depende de
BookReviewsController --> BookReviewsService : Depende de
GenresController --> GenresService : Depende de
PurchasesController --> PurchaseService : Depende de
RecomendationsController --> RecomendationsService : Depende de
CarouselController --> CarouselService : Depende de
ShoppingCartController --> ShoppingCartService : Depende de
SubscriptionController --> SubscriptionService : Depende de
UserSubscriptionController --> UserSubscriptionService : Depende de
UserSubscriptionDiscountController --> UserSubscriptionDiscountService :Depende de
UsersControllers --> UsersService : Depende de

AuthorService --> AuthorEntity : Depende de
BooksService --> BookEntity : Depende de
BooksService --> GenreEntity : Depende de
BookContentService --> VirtualBookContentEntity : Depende de
LibraryBooksService --> UserVirtualBooksEntity : Depende de
BookReviewsService -- ReviewEntity : Depende de
GenresService --> GenreEntity :Depende
PurchaseService --> PurchaseEntity : Depende de 
PurchaseService --> ShoppingCartBookEntity : Depende de
PurchaseService --> BookEntity : Depende de
PurchaseService --> UserEntity : Depende de
RecomendationsService --> BookRecommendationEntity : Depende de
CarouselService --> CarouselEntity : Depende de
ShoppingCartService --> ShoppingCartBookEntity : Depende de
SubscriptionService --> SubscriptionEntity : Depende de
UserSubscriptionService --> UserSubscriptionEntity : Depende de
UserSubscriptionService --> UserEntity : Depende de
UserSubscriptionService --> SubscriptionEntity : Depende de
UsersService --> UserEntity : Depende de
UserSubscriptionDiscountService --> UserSubscriptionDiscountEntity : Depende de
UserSubscriptionDiscountService --> SubscriptionEntity : Depende de

AuthService --> LoginRequestBody : Depende de
AuthService --> RegisterRequestBody : Depende de
AuthorService --> CreateAuthorDto : Depende de
BooksService --> BookDTO : Depende de
BooksService --> CreateBookDto : Depende
CatalogueBooksService --> CatalogueBookDTO : Depende de
BookContentService --> BookContentDTO : Depende de
LibraryBooksService --> LibraryBookDTO : Depende de
BookReviewsService --> ReviewI : Depende de
PurchaseService --> PurchaseDTO : Depende de
RecomendationsService --> RecommendationDTO : Depende de
RecomendationsService --> CreateRecommendationDTO : Depende de
CarouselService --> CarouselDTO : Depende de
ShoppingCartService --> BookCartDTO : Depende de
SubscriptionService --> SubscriptionDTO : Depende de
UserSubscriptionService --> UserSubscriptionDTO : Depende de

UsersControllers --> UpdateUserDto : usa
LibraryBooksController --> CreateUserVirtualBookDto : usa

BookDTO --> BookDTOProps : usa
CreateBookDto --> CreateBookDTOProps : usa
RegisterRequestBody --> registerRequestBodyProps : usa
PurchaseDTO --> PurchaseDTOProps : usa


@enduml


/'
Book "1" *-- "n" Author : author ===> @ManyToOne (Libro → Autor)
Book "*" -- "*" Genre : genre ===> @Many-to-Many (Libro → Género)
User "1" *-- "1" Profile : profile ===> One-to-One (Usuario → Perfil)

Author "1" *-- "n" Book : books ===> One-to-Many (Autor → Libros)
'/
