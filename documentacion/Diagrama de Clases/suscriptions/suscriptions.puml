@startuml

package moduloSubscription {
    package userSubscription{
        class UserSubscriptionEntity {
            - id: number
            + user: User
            - startDate: Date
            - endDate: Date
            - ongoing: boolean
            - subscription: Subscription
        }

        class UserSubscriptionDTO {
            + id: number
            + startDate: string
            + endDate: string
            + ongoing: boolean
            + subscription: SubscriptionDTO | null
        }

        class UserSubscriptionService {
            - userSubscriptionRepository: Repository<UserSubscription>
            - userRepository: Repository<User>
            - subscriptionRepository: Repository<Subscription>

            + createSubscription(userId: number, startDate: Date, endDate: Date): Promise<UserSubscription>
            + getUserSubscription(userId: number): Promise<UserSubscriptionDTO>
            + getUserSubscriptions(): Promise<UserSubscriptionDTO[]>
            + cancelSubscription(id: number): Promise<void>
        }

        class UserSubscriptionController {
            - userSubscriptionService: UserSubscriptionService

            + createSubscription(userId: number, startDate: Date, endDate: Date,): Promise<UserSubscription>
            + getUserSubscription(userId: number): Promise<UserSubscriptionDTO>
            + getUserSubscriptions() : Promise<UserSubscriptionDTO[]>
            + cancelSubscription(id: number): Promise<void>
        }
    }

    package subscriptionConfig {
        class SubscriptionDTO {
            + id:number
            + price: number
        }

        class SubscriptionEntity {
            - id: number
            - price: number
            + userSubscriptions: UserSubscription[]
        }

        class SubscriptionService {
            - subscriptionConfigRepository: Repository<Subscription>

            + get(): Promise<SubscriptionDTO>
            + update(id: number, config: Partial<SubscriptionDTO>)
            + create(data: SubscriptionDTO): Promise<Subscription>
        }

        class SubscriptionController {
            - subscriptionService: SubscriptionService

            + getUserSubscriptions(): Promise<SubscriptionDTO>
            + update(updateData: Partial<SubscriptionDTO>)
            + create(data: SubscriptionDTO)
        }

    }

    package subscriptionDiscount {
        class SubscriptionDiscountController {
            - discountService: UserSubscriptionDiscountService

            + create(data: { id_subscription: number; discount: number }): Promise<UserSubscriptionDiscount> {
            + findAll(): Promise<UserSubscriptionDiscount[]>
            + findOne(id: number): Promise<UserSubscriptionDiscount> {
            + update(id: number, data: { discount: number }): Promise<UserSubscriptionDiscount>
            + delete(id: number): Promise<void> {
        }

        class SubscriptionDiscountService {

            - discountRepo: Repository<UserSubscriptionDiscount>
            - subscriptionRepo: Repository<Subscription>
            
            + create(data: { id_subscription: number; discount: number }): Promise<UserSubscriptionDiscount>
            + findAll(): Promise<UserSubscriptionDiscount[]>
            + findOne(id: number): Promise<UserSubscriptionDiscount>
            + update(id: number, data: { discount: number }): Promise<UserSubscriptionDiscount>
            + delete(id: number): Promise<void>
        }

        class UserSubscriptionDiscountEntity {
            - id: number;
            - subscription: Subscription;
            - discount: number;
        }
    }

}

' relaciones
UserSubscriptionService --> UserSubscriptionEntity : Depende de
UserSubscriptionService --> UserSubscriptionDTO : Depende de
UserSubscriptionController --> UserSubscriptionService : Depende de

SubscriptionService --> SubscriptionEntity : depende de
SubscriptionService --> SubscriptionDTO : depende de
SubscriptionController --> SubscriptionService : depende de

SubscriptionDiscountController --> SubscriptionDiscountService : Depende de
SubscriptionDiscountService --> UserSubscriptionDiscountEntity : Depende de  
@enduml